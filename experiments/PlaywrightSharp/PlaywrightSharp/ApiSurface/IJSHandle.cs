/*
 * MIT License
 *
 * Copyright (c) Microsoft Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 * ------------------------------------------------------------------------------ 
 * <auto-generated> 
 * This code was generated by a tool at:
 * /utils/doclint/generateDotnetApi.js
 * 
 * Changes to this file may cause incorrect behavior and will be lost if 
 * the code is regenerated. 
 * </auto-generated> 
 * ------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace PlaywrightSharp
{
    /// <summary>
	/// JSHandle represents an in-page JavaScript object. JSHandles can be created with the <see cref="IPage.EvaluateHandleAsync"/> method.
	/// JSHandle prevents the referenced JavaScript object being garbage collected unless the handle is exposed with 
	/// <see cref="IJSHandle.DisposeAsync"/>. JSHandles are auto-disposed when their origin frame gets navigated or the parent context
	/// gets destroyed.
	/// JSHandle instances can be used as an argument in <see cref="IPage.EvalOnSelectorAsync"/>, <see cref="IPage.EvaluateAsync"/> and
	/// <see cref="IPage.EvaluateHandleAsync"/> methods.
	/// </summary>
	public interface IJSHandle
	{
		/// <summary>
		/// Returns either `null` or the object handle itself, if the object handle is an instance of <see cref="IElementHandle"/>.
		/// </summary>
		IElementHandle GetAsElement();
		/// <summary>
		/// The `jsHandle.dispose` method stops referencing the element handle.
		/// </summary>
		Task DisposeAsync();
		/// <summary>
		/// Returns the return value of {PARAM}
		/// This method passes this handle as the first argument to {PARAM}.
		/// If {PARAM} returns a [Promise], then `handle.evaluate` would wait for the promise to resolve and return its value.
		/// Examples:
		/// </summary>
		Task<T> EvaluateAsync<T>(object arg);
		/// <summary>
		/// Returns the return value of {PARAM} as in-page object (JSHandle).
		/// This method passes this handle as the first argument to {PARAM}.
		/// The only difference between `jsHandle.evaluate` and `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle` returns in-page
		/// object (JSHandle).
		/// If the function passed to the `jsHandle.evaluateHandle` returns a [Promise], then `jsHandle.evaluateHandle` would wait for the promise to resolve and return its value.
		/// See <see cref="IPage.EvaluateHandleAsync"/> for more details.
		/// </summary>
		Task<IJSHandle> EvaluateHandleAsync(object arg);
		/// <summary>
		/// The method returns a map with **own property names** as keys and JSHandle instances for the property values.
		/// </summary>
		Task<Dictionary<string, IJSHandle>> GetPropertiesAsync();
		/// <summary>
		/// Fetches a single property from the referenced object.
		/// </summary>
		Task<IJSHandle> GetPropertyAsync(string propertyName);
		/// <summary>
		/// Returns a JSON representation of the object. If the object has a `toJSON` function, it **will not be called**.
		/// </summary>
		Task<T> GetJsonValueAsync<T>();
	}
}