/*
 * MIT License
 *
 * Copyright (c) Microsoft Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 * ------------------------------------------------------------------------------ 
 * <auto-generated> 
 * This code was generated by a tool at:
 * /utils/doclint/generateDotnetApi.js
 * 
 * Changes to this file may cause incorrect behavior and will be lost if 
 * the code is regenerated. 
 * </auto-generated> 
 * ------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace PlaywrightSharp
{
    /// <summary>
	/// <see cref="IDownload"/> objects are dispatched by page via the <see cref="IPage.OnDownload"/> event.
	/// All the downloaded files belonging to the browser context are deleted when the browser context is closed. All downloaded
	/// files are deleted when the browser closes.
	/// Download event is emitted once the download starts. Download path becomes available once download completes:
	/// </summary>
	public interface IDownload
	{
		/// <summary>
		/// Deletes the downloaded file.
		/// </summary>
		Task DeleteAsync();
		/// <summary>
		/// Returns download error if any.
		/// </summary>
		Task<string> GetFailureAsync();
		/// <summary>
		/// Returns path to the downloaded file in case of successful download.
		/// </summary>
		Task<path> GetPathAsync();
		/// <summary>
		/// Saves the download to a user-specified path.
		/// </summary>
		Task SaveAsAsync(path path);
		/// <summary>
		/// Returns suggested filename for this download. It is typically computed by the browser from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition">`Content-Disposition`</a> response
		/// header or the `download` attribute. See the spec on <a href="https://html.spec.whatwg.org/#downloading-resources">whatwg</a>.
		/// Different browsers can use different logic for computing it.
		/// </summary>
		string GetSuggestedFilename();
		/// <summary>
		/// Returns downloaded url.
		/// </summary>
		string GetUrl();
	}
}