/*
 * MIT License
 *
 * Copyright (c) Microsoft Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 * ------------------------------------------------------------------------------ 
 * <auto-generated> 
 * This code was generated by a tool at:
 * /utils/doclint/generateDotnetApi.js
 * 
 * Changes to this file may cause incorrect behavior and will be lost if 
 * the code is regenerated. 
 * </auto-generated> 
 * ------------------------------------------------------------------------------
 */
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Runtime.Serialization;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace PlaywrightSharp
{
    /// <summary>
	/// <seealso cref="[EventEmitter]"/>
	/// A Browser is created via <see cref="IBrowserType.LaunchAsync"/>. An example of using a <see cref="IBrowser"/> to create a
	/// <see cref="IPage"/>:
	/// </summary>
	public interface IBrowser
	{
		event EventHandler<IBrowser> OnDisconnected;
		/// <summary>
		/// In case this browser is obtained using <see cref="IBrowserType.LaunchAsync"/>, closes the browser and all of its pages (if
		/// any were opened).
		/// In case this browser is connected to, clears all created contexts belonging to this browser and disconnects from the browser
		/// server.
		/// The <see cref="IBrowser"/> object itself is considered to be disposed and cannot be used anymore.
		/// </summary>
		Task CloseAsync();
		/// <summary>
		/// Returns an array of all open browser contexts. In a newly created browser, this will return zero browser contexts.
		/// </summary>
		dynamic GetContexts();
		/// <summary>
		/// Indicates that the browser is connected.
		/// </summary>
		bool IsConnected();
		/// <summary>
		/// Creates a new browser context. It won't share cookies/cache with other browser contexts.
		/// </summary>
		Task<IBrowserContext> NewContextAsync(bool acceptDownloads, bool bypassCSP, ColorScheme colorScheme, float deviceScaleFactor, IEnumerable<KeyValuePair<string, string>> extraHTTPHeaders, object geolocation, bool hasTouch, object httpCredentials, bool ignoreHTTPSErrors, bool isMobile, bool javaScriptEnabled, string locale, bool offline, string[] permissions, object proxy, BrowserStorageState storageState, string timezoneId, string userAgent);
		/// <summary>
		/// Creates a new page in a new browser context. Closing this page will close the context as well.
		/// This is a convenience API that should only be used for the single-page scenarios and short snippets. Production code and
		/// testing frameworks should explicitly create <see cref="IBrowser.NewContextAsync"/> followed by the <see cref="IBrowserContext.NewPageAsync"/> to
		/// control their exact life times.
		/// </summary>
		Task<IPage> NewPageAsync(bool acceptDownloads, bool bypassCSP, ColorScheme colorScheme, float deviceScaleFactor, IEnumerable<KeyValuePair<string, string>> extraHTTPHeaders, object geolocation, bool hasTouch, object httpCredentials, bool ignoreHTTPSErrors, bool isMobile, bool javaScriptEnabled, string locale, bool offline, string[] permissions, object proxy, BrowserStorageState storageState, string timezoneId, string userAgent);
		/// <summary>
		/// Returns the browser version.
		/// </summary>
		string GetVersion();
	}
}