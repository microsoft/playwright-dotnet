{
  "entities": [
    {
      "upstreamClassName": "browser",
      "className": "IBrowser",
      "members": [
        {
          "upstreamMemberName": "newContext",
          "memberName": "NewContextAsync",
          "arguments": [
            {
              "upstreamArgumentName": "logger",
              "justification": "We inject the logger differently."
            },
            {
              "upstreamArgumentName": "videosPath",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "videoSize",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "storageState",
              "justification": "storageState has two types upstream: storageState and string. We call the string option storageStatePath."
            }
          ]
        },
        {
          "upstreamMemberName": "newPage",
          "memberName": "NewPageAsync",
          "arguments": [
            {
              "upstreamArgumentName": "logger",
              "justification": "We inject the logger differently."
            },
            {
              "upstreamArgumentName": "videosPath",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "videoSize",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "storageState",
              "justification": "storageState has two types upstream: storageState and string. We call the string option storageStatePath."
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "browserContext",
      "className": "IBrowserContext",
      "members": [
        {
          "upstreamMemberName": "addInitScript",
          "memberName": "AddInitScriptAsync",
          "arguments": [
            {
              "upstreamArgumentName": "script",
              "justification": "We have script as a function, which we don't support, and we have script as an object which we expose as arguments."
            }
          ]
        },
        {
          "upstreamMemberName": "exponseBinding",
          "memberName": "ExposeBindingAsync",
          "arguments": [
            {
              "upstreamArgumentName": "handle",
              "justification": "We don't need a handle bool. We can infer the type from the argument."
            }
          ]
        },
        {
          "upstreamMemberName": "waitForEvent",
          "memberName": "WaitForEventAsync",
          "arguments": [
            {
              "upstreamArgumentName": "event",
              "justification": "event is a reserved word. We call it e"
            },
            {
              "upstreamArgumentName": "optionsOrPredicate",
              "justification": "We have options and predicate"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "browserType",
      "className": "IBrowserType",
      "members": [
        {
          "upstreamMemberName": "connect",
          "justification": "We don't support this feature yet"
        },
        {
          "upstreamMemberName": "launchServer",
          "justification": "We don't support this feature yet"
        },
        {
          "upstreamMemberName": "launch",
          "memberName": "LaunchAsync",
          "arguments": [
            {
              "upstreamArgumentName": "logger",
              "justification": "We inject the logger differently."
            },
            {
              "upstreamArgumentName": "ignoreDefaultArgs",
              "justification": "ignoreDefaultArgs as boolean is called ignoreAllDefaultArgs"
            }
          ]
        },
        {
          "upstreamMemberName": "launchPersistentContext",
          "memberName": "LaunchPersistentContextAsync",
          "arguments": [
            {
              "upstreamArgumentName": "videosPath",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "videoSize",
              "justification": "This property is in upstream for backwards compatibility."
            },
            {
              "upstreamArgumentName": "logger",
              "justification": "We inject the logger differently."
            },
            {
              "upstreamArgumentName": "ignoreDefaultArgs",
              "justification": "ignoreDefaultArgs as boolean is called ignoreAllDefaultArgs"
            },
            {
              "upstreamArgumentName": "firefoxUserPrefs",
              "justification": "firefoxUserPrefs is a Dictionary not an object."
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "page",
      "className": "IPage",
      "members": [
        {
          "upstreamMemberName": "evalOnSelector",
          "memberName": "EvalOnSelectorAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evalOnSelectorAll",
          "memberName": "EvalOnSelectorAllAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluate",
          "memberName": "EvaluateAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluateHandle",
          "memberName": "EvaluateHandleAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "waitForFunction",
          "memberName": "WaitForFunctionAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "addInitScript",
          "memberName": "AddInitScriptAsync",
          "arguments": [
            {
              "upstreamArgumentName": "script",
              "justification": "We have script as a function, which we don't support, and we have script as an object which we expose as arguments."
            }
          ]
        },
        {
          "upstreamMemberName": "pdf",
          "memberName": "GetPdfAsync",
          "arguments": [
            {
              "upstreamArgumentName": "width",
              "justification": "It's a string or number upstream. We covered this using only a string"
            },
            {
              "upstreamArgumentName": "height",
              "justification": "In upstream is string or number. We covered this using only a string"
            }
          ]
        },
        {
          "upstreamMemberName": "exponseBinding",
          "memberName": "ExposeBindingAsync",
          "arguments": [
            {
              "upstreamArgumentName": "handle",
              "justification": "We don't need a handle bool. We can infer the type from the argument."
            }
          ]
        },
        {
          "upstreamMemberName": "hover",
          "memberName": "HoverAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "tap",
          "memberName": "TapAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "click",
          "memberName": "ClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "dblClick",
          "memberName": "DblClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "waitForEvent",
          "memberName": "WaitForEventAsync",
          "arguments": [
            {
              "upstreamArgumentName": "event",
              "justification": "event is a reserved word. We call it e"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "frame",
      "className": "IFrame",
      "members": [
        {
          "upstreamMemberName": "evalOnSelector",
          "memberName": "EvalOnSelectorAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evalOnSelectorAll",
          "memberName": "EvalOnSelectorAllAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluate",
          "memberName": "EvaluateAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "waitForFunction",
          "memberName": "WaitForFunctionAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluateHandle",
          "memberName": "EvaluateHandleAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "addInitScript",
          "memberName": "AddInitScriptAsync",
          "arguments": [
            {
              "upstreamArgumentName": "script",
              "justification": "We have script as a function, which we don't support, and we have script as an object which we expose as arguments."
            }
          ]
        },
        {
          "upstreamMemberName": "hover",
          "memberName": "HoverAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "tap",
          "memberName": "TapAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "click",
          "memberName": "ClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "dblClick",
          "memberName": "DblClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "waitForEvent",
          "memberName": "WaitForEventAsync",
          "arguments": [
            {
              "upstreamArgumentName": "event",
              "justification": "event is a reserved word. We call it e"
            },
            {
              "upstreamArgumentName": "optionsOrPredicate",
              "justification": "We have options and predicate"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "elementHandle",
      "className": "IElementHandle",
      "members": [
        {
          "upstreamMemberName": "asElement",
          "justification": "Implicit from C# type casting"
        },
        {
          "upstreamMemberName": "evalOnSelector",
          "memberName": "EvalOnSelectorAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evalOnSelectorAll",
          "memberName": "EvalOnSelectorAllAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "hover",
          "memberName": "HoverAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "tap",
          "memberName": "TapAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "click",
          "memberName": "ClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        },
        {
          "upstreamMemberName": "dblClick",
          "memberName": "DblClickAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "touchscreen",
      "className": "ITouchscreen",
      "members": [
        {
          "upstreamMemberName": "tap",
          "memberName": "TapAsync",
          "arguments": [
            {
              "upstreamArgumentName": "x",
              "justification": "We use a Position object instead of an X/Y pair."
            },
            {
              "upstreamArgumentName": "y",
              "justification": "We use a Position object instead of an X/Y pair."
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "jsHandle",
      "className": "IJSHandle",
      "members": [
        {
          "upstreamMemberName": "asElement",
          "justification": "Implicit from C# type casting"
        },
        {
          "upstreamMemberName": "evaluate",
          "memberName": "EvaluateAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluateHandle",
          "memberName": "EvaluateHandleAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "worker",
      "className": "IWorker",
      "members": [
        {
          "upstreamMemberName": "evaluate",
          "memberName": "EvaluateAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        },
        {
          "upstreamMemberName": "evaluateHandle",
          "memberName": "EvaluateHandleAsync",
          "arguments": [
            {
              "upstreamArgumentName": "expression",
              "justification": "We don't support expression as a function"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "websocket",
      "className": "IWebSocket",
      "members": [
        {
          "upstreamMemberName": "waitForEvent",
          "memberName": "WaitForEventAsync",
          "arguments": [
            {
              "upstreamArgumentName": "event",
              "justification": "event is a reserved word. We call it e"
            },
            {
              "upstreamArgumentName": "optionsOrPredicate",
              "justification": "We have options and predicate"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "selectors",
      "className": "Selectors",
      "members": [
        {
          "upstreamMemberName": "register",
          "memberName": "RegisterAsync",
          "arguments": [
            {
              "upstreamArgumentName": "script",
              "justification": "We don't support script as a function"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "route",
      "className": "Route",
      "members": [
        {
          "upstreamMemberName": "continue",
          "memberName": "ContinueAsync",
          "arguments": [
            {
              "upstreamArgumentName": "method",
              "justification": "We use the HttpMethod enum instead of a string"
            }
          ]
        },
        {
          "upstreamMemberName": "fulfill",
          "memberName": "FulfillAsync",
          "arguments": [
            {
              "upstreamArgumentName": "status",
              "justification": "We use the HttpStatusCode enum instead of a number"
            }
          ]
        }
      ]
    },
    {
      "upstreamClassName": "margin",
      "className": "Margin",
      "members": [
        {
          "upstreamMemberName": "top",
          "justification": "In upstream is string or number. We covered this using only a string"
        },
        {
          "upstreamMemberName": "bottom",
          "justification": "In upstream is string or number. We covered this using only a string"
        },
        {
          "upstreamMemberName": "right",
          "justification": "In upstream is string or number. We covered this using only a string"
        },
        {
          "upstreamMemberName": "left",
          "justification": "In upstream is string or number. We covered this using only a string"
        }
      ]
    },
    {
      "upstreamClassName": "TimeoutError",
      "justification": "We don't need this class"
    },
    {
      "upstreamClassName": "Logger",
      "justification": "We don't need this class"
    },
    {
      "upstreamClassName": "FirefoxBrowser",
      "justification": "We don't need this class"
    },
    {
      "upstreamClassName": "WebKitBrowser",
      "justification": "We don't need this class"
    },
    {
      "upstreamClassName": "BrowserServer",
      "justification": "We don't support this yet"
    },
    {
      "className": "WebSocketFrameEventArgs",
      "members": [
        {
          "upstreamMemberName": "binary",
          "justification": "We are solving it a little bit different in this implementation"
        },
        {
          "upstreamMemberName": "text",
          "justification": "We are solving it a little bit different in this implementation"
        }
      ],
      "upstreamClassName": "Android",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "AndroidDevice",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "AndroidInput",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "AndroidSocket",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "AndroidWebView",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "Electron",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "ElectronApplication",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "BrowserServer",
      "justification": "We don't support this yet"
    },
    {
      "upstreamClassName": "browserContextOptions",
      "className": "BrowserContextOptions",
      "members": [
        {
          "upstreamMemberName": "logger",
          "justification": "We inject the logger differently."
        },
        {
          "upstreamMemberName": "videosPath",
          "justification": "This property is in upstream for backwards compatibility."
        },
        {
          "upstreamMemberName": "videoSize",
          "justification": "This property is in upstream for backwards compatibility."
        },
        {
          "upstreamMemberName": "storageState",
          "justification": "storageState has two types upstream: storageState and string. We call the string option storageStatePath."
        }
      ]
    },
    {
      "upstreamClassName": "cdpsession",
      "className": "CDPSession",
      "members": [
        {
          "upstreamMemberName": "send",
          "memberName": "SendAsync",
          "arguments": [
            {
              "upstreamArgumentName": "params",
              "justification": "params is a reserved keyword, we call it args"
            }
          ]
        }
      ]
    }
  ]
}