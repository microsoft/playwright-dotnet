using System;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace PlaywrightSharp.ProtocolTypesGenerator
{
    class Program
    {
        static async Task Main(string[] args)
        {
            IProtocolTypesGenerator[] generators =
            {
                new ChromiumProtocolTypesGenerator()
            };

            var revision = new RevisionInfo("test")
            {
                ExecutablePath = @"D:\Playground\Playground.cs\ConsoleApp1\ConsoleApp1\.local-chromium\Win64-706915\chrome-win\chrome.exe",
                Local = true
            };

            foreach (var generator in generators)
            {
                await generator.GenerateTypesAsync(revision);
            }
        }
    }

    public interface IProtocolTypesGenerator
    {
        Task GenerateTypesAsync(RevisionInfo revision);
    }

    public class ChromiumProtocolTypesGenerator : IProtocolTypesGenerator
    {
        public async Task GenerateTypesAsync(RevisionInfo revision)
        {
            string output = Path.Join("..", "..", "..", "..", "PlaywrightSharp.Chromium", "Protocol.Generated.cs");
            if (revision.Local && File.Exists(output))
            {
                // return;
            }

            using (var process = Process.Start(revision.ExecutablePath, "--remote-debugging-port=9222 --headless"))
            using (var stream = await new HttpClient().GetStreamAsync("http://localhost:9222/json/protocol"))
            {
                var response = await JsonSerializer.DeserializeAsync<ChromiumProtocolDomainsContainer>(stream, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
                process.Kill();
                var builder = new StringBuilder();
                builder.Append(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
");
                builder.AppendLine($"namespace Playwright.Chromium.Protocol");
                builder.AppendLine("{");
                foreach (var domain in response.Domains)
                {
                    builder.AppendLine("/// <summary>");
                    builder.AppendLine($"/// The {domain.Domain} domain.");
                    builder.AppendLine("/// </summary>");
                    builder.AppendLine($"public class {domain.Domain}");
                    builder.AppendLine("{");
                    if (domain.Types != null)
                        foreach (var type in domain.Types)
                        {
                            if (type.Enum != null)
                            {
                                builder.AppendLine("/// <summary>");
                                builder.AppendLine($"/// {type.Description?.Replace("\n", "\n/// ")}");
                                builder.AppendLine("/// </summary>");
                                builder.AppendLine($"public enum {type.Id}");
                                builder.AppendLine("{");
                                builder.AppendJoin(",\n", NormalizeEnum(type.Enum));
                                builder.AppendLine("}");
                            }
                        }

                    if (domain.Commands != null)
                        foreach (var command in domain.Commands)
                        {

                        }
                    builder.AppendLine("}");
                }
                builder.AppendLine("}");
                await File.WriteAllTextAsync(output, builder.ToString());

                return;
            }
        }

        public string GetTypeOfProperty(ChromiumProtocolDomainType property)
        {
            if (property.Ref != null) return property.Ref;

            return property.Type switch
            {
                "string" when property.Enum == null => "string",
                "string" when property.Enum.Length > 0 => "enum",
                "array" => GetTypeOfProperty(property.Items) + "[]",
                "integer" => "int",
                "object" => ""
            };
        }

        public string[] NormalizeEnum(string[] values)
        {
            return Array.ConvertAll(values, value =>
            {
                var builder = new StringBuilder().Append($"[System.Runtime.Serialization.EnumMember(Value = \"{value}\")]");
                bool shouldUppercase = true;
                for (int i = 0; i < value.Length; i++)
                {
                    if (char.IsLetter(value[i]))
                    {
                        if (shouldUppercase && char.IsLower(value[i]))
                        {
                            shouldUppercase = false;
                            builder.Append(char.ToUpper(value[i]));
                        }
                        else
                        {
                            builder.Append(value[i]);
                        }
                    }
                    else
                    {
                        shouldUppercase = true;
                    }
                }

                return builder.ToString();
            });
        }

        public class ChromiumProtocolDomainsContainer
        {
            public ChromiumProtocolDomain[] Domains { get; set; }
        }

        public class ChromiumProtocolDomain
        {
            public string Domain { get; set; }
            public bool Experemental { get; set; }
            public string[] Dependencies { get; set; }
            public ChromiumProtocolDomainType[] Types { get; set; }
            public ChromiumProtocolDomainCommand[] Commands { get; set; }
        }

        public class ChromiumProtocolDomainType
        {
            public string Id { get; set; }
            public string Description { get; set; }
            public string Type { get; set; }
            public string[] Enum { get; set; }
            public ChromiumProtocolDomainType[] Properties { get; set; }
            [JsonPropertyName("$ref")]
            public string Ref { get; set; }
            public bool? Optional { get; set; }
            public ChromiumProtocolDomainType Items { get; set; }
        }

        public class ChromiumProtocolDomainCommand
        {
            public string Name { get; set; }
            public string Description { get; set; }
            public bool? Experimental { get; set; }
            public ChromiumProtocolDomainType[] Parameters { get; set; }
            public ChromiumProtocolDomainType[] Returns { get; set; }
        }
    }
}
